/* */ 
"format cjs";
/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.11.2-master-bb8fd26
 */
function MdProgressLinearDirective(e,r,a){function n(e,r,a){return e.attr("aria-valuemin",0),e.attr("aria-valuemax",100),e.attr("role","progressbar"),t}function t(n,t,l){function c(){l.$observe("value",function(e){var r=i(e);t.attr("aria-valuenow",r),g()!=m&&v(h,r)}),l.$observe("mdBufferValue",function(e){v(b,i(e))}),l.$observe("mdMode",function(e){switch(e){case m:case d:case o:case s:L.removeClass("ng-hide "+f),L.addClass(f="md-mode-"+e);break;default:L.removeClass(f),L.addClass("ng-hide"),f=void 0}})}function u(){if(angular.isUndefined(l.mdMode)){var e=angular.isDefined(l.value),n=e?o:s,i="Auto-adding the missing md-mode='{0}' to the ProgressLinear element";a.debug(r.supplant(i,[n])),t.attr("md-mode",n),l.mdMode=n}}function g(){var e=(l.mdMode||"").trim();if(e)switch(e){case o:case s:case d:case m:break;default:e=void 0}return e}function v(e,a){if(g()){var n=r.supplant("translateX({0}%) scale({1},1)",[(a-100)/2,a/100]),t=p({transform:n});angular.element(e).css(t)}}e(t);var f,p=r.dom.animator.toCss,b=angular.element(t[0].querySelector(".md-bar1")),h=angular.element(t[0].querySelector(".md-bar2")),L=angular.element(t[0].querySelector(".md-container"));t.attr("md-mode",g()),u(),c()}function i(e){return Math.max(0,Math.min(e||0,100))}var o="determinate",s="indeterminate",d="buffer",m="query";return{restrict:"E",template:'<div class="md-container"><div class="md-dashed"></div><div class="md-bar md-bar1"></div><div class="md-bar md-bar2"></div></div>',compile:n}}goog.provide("ng.material.components.progressLinear"),goog.require("ng.material.core"),angular.module("material.components.progressLinear",["material.core"]).directive("mdProgressLinear",MdProgressLinearDirective),MdProgressLinearDirective.$inject=["$mdTheming","$mdUtil","$log"],ng.material.components.progressLinear=angular.module("material.components.progressLinear");